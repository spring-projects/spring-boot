/*
 * Copyright 2012-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id "java-library"
	id "java-test-fixtures"
	id "org.springframework.boot.auto-configuration"
	id "org.springframework.boot.configuration-properties"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.docker-test"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Testcontainers Support"

dependencies {
	api(project(":core:spring-boot-autoconfigure"))
	api("org.testcontainers:testcontainers")

	dockerTestImplementation(project(":core:spring-boot-test"))
	dockerTestImplementation(project(":test-support:spring-boot-docker-test-support"))
	dockerTestImplementation("ch.qos.logback:logback-classic")
	dockerTestImplementation("com.redis:testcontainers-redis")
	dockerTestImplementation("org.assertj:assertj-core")
	dockerTestImplementation("org.awaitility:awaitility")
	dockerTestImplementation("org.junit.jupiter:junit-jupiter")
	dockerTestImplementation("org.junit.platform:junit-platform-launcher")
	dockerTestImplementation("org.mockito:mockito-core")
	dockerTestImplementation("org.springframework:spring-core-test")
	dockerTestImplementation("org.springframework:spring-jdbc")
	dockerTestImplementation("org.testcontainers:junit-jupiter")
	dockerTestImplementation("org.testcontainers:postgresql")

	dockerTestRuntimeOnly("com.zaxxer:HikariCP")
	dockerTestRuntimeOnly("com.h2database:h2")
	dockerTestRuntimeOnly("org.postgresql:postgresql")

	optional("org.springframework:spring-test")
	optional("org.springframework.data:spring-data-mongodb")
	optional("org.springframework.data:spring-data-neo4j")

	testImplementation(project(":core:spring-boot-test"))
	testImplementation(project(":test-support:spring-boot-test-support"))
	testImplementation("org.testcontainers:junit-jupiter")
	testImplementation("org.testcontainers:postgresql")
}

dockerTest {
	jvmArgs += "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED"
}

tasks.named("compileTestJava") {
	options.nullability.checking = "tests"
}

tasks.named("compileDockerTestJava") {
	options.nullability.checking = "tests"
}
