{
  "groups": [],
  "properties": [
    {
      "name": "management.health.redis.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Redis health check.",
      "defaultValue": true
    },
    {
      "name": "spring.data.redis.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Redis repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.redis.ssl",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.data.redis.ssl.enabled",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.client-name",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.client-name",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.client-type",
      "type": "org.springframework.boot.data.redis.autoconfigure.DataRedisProperties$ClientType",
      "deprecation": {
        "replacement": "spring.data.redis.client-type",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.cluster.max-redirects",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.data.redis.cluster.max-redirects",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.cluster.nodes",
      "type": "java.util.List<java.lang.String>",
      "deprecation": {
        "replacement": "spring.data.redis.cluster.nodes",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.connect-timeout",
      "type": "java.time.Duration",
      "deprecation": {
        "replacement": "spring.data.redis.connect-timeout",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.database",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.data.redis.database",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.host",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.host",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.jedis.pool.enabled",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.jedis.pool.max-active",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.jedis.pool.max-idle",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.jedis.pool.max-wait",
      "type": "java.time.Duration",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.jedis.pool.min-idle",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.jedis.pool.time-between-eviction-runs",
      "type": "java.time.Duration",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.cluster.refresh.adaptive",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.data.redis.lettuce.cluster.refresh.adaptive",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.cluster.refresh.dynamic-refresh-sources",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.data.redis.lettuce.cluster.refresh.dynamic-refresh-sources",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.cluster.refresh.period",
      "type": "java.time.Duration",
      "deprecation": {
        "replacement": "spring.data.redis.lettuce.cluster.refresh.period",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.pool.enabled",
      "type": "java.lang.Boolean",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.pool.max-active",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.pool.max-idle",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.pool.max-wait",
      "type": "java.time.Duration",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.pool.min-idle",
      "type": "java.lang.Integer",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.pool.time-between-eviction-runs",
      "type": "java.time.Duration",
      "deprecation": {
        "level": "error"
      }
    },
    {
      "name": "spring.redis.lettuce.shutdown-timeout",
      "type": "java.time.Duration",
      "deprecation": {
        "replacement": "spring.data.redis.lettuce.shutdown-timeout",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.password",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.password",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.port",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.data.redis.port",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.sentinel.master",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.sentinel.master",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.sentinel.nodes",
      "type": "java.util.List<java.lang.String>",
      "deprecation": {
        "replacement": "spring.data.redis.sentinel.nodes",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.sentinel.password",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.sentinel.password",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.sentinel.username",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.sentinel.username",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.ssl",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.data.redis.ssl",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.timeout",
      "type": "java.time.Duration",
      "deprecation": {
        "replacement": "spring.data.redis.timeout",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.url",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.url",
        "level": "error"
      }
    },
    {
      "name": "spring.redis.username",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "spring.data.redis.username",
        "level": "error"
      }
    }
  ],
  "hints": [
    {
      "name": "spring.data.redis.lettuce.read-from",
      "values": [
        {
          "value": "any",
          "description": "Read from any node."
        },
        {
          "value": "any-replica",
          "description": "Read from any replica node."
        },
        {
          "value": "lowest-latency",
          "description": "Read from the node with the lowest latency during topology discovery."
        },
        {
          "value": "regex:",
          "description": "Read from any node that has RedisURI matching with the given pattern."
        },
        {
          "value": "replica",
          "description": "Read from the replica only."
        },
        {
          "value": "replica-preferred",
          "description": "Read preferred from replica and fall back to upstream if no replica is available."
        },
        {
          "value": "subnet:",
          "description": "Read from any node in the subnets."
        },
        {
          "value": "upstream",
          "description": "Read from the upstream only."
        },
        {
          "value": "upstream-preferred",
          "description": "Read preferred from the upstream and fall back to a replica if the upstream is not available."
        }
      ],
      "providers": [
        {
          "name": "any"
        }
      ]
    }
  ]
}
