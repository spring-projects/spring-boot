/*
 * Copyright 2012-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id "java-library"
	id "java-test-fixtures"
	id "org.springframework.boot.auto-configuration"
	id "org.springframework.boot.configuration-properties"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.docker-test"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot R2DBC"

dependencies {
	api(project(":core:spring-boot"))
	api(project(":module:spring-boot-sql"))
	api(project(":module:spring-boot-transaction"))
	api("org.springframework:spring-r2dbc")
	api("org.springframework:spring-r2dbc")

	compileOnly("com.fasterxml.jackson.core:jackson-annotations")
	compileOnly("com.google.code.findbugs:jsr305")

	optional(project(":core:spring-boot-autoconfigure"))
	optional(project(":core:spring-boot-docker-compose"))
	optional(project(":core:spring-boot-testcontainers"))
	optional(project(":module:spring-boot-health"))
	optional(project(":module:spring-boot-jdbc"))
	optional(project(":module:spring-boot-micrometer-metrics"))
	optional(project(":module:spring-boot-micrometer-observation"))
	optional("io.micrometer:micrometer-core")
	optional("io.r2dbc:r2dbc-pool")
	optional("io.r2dbc:r2dbc-proxy")
	optional("io.r2dbc:r2dbc-spi")
	optional("org.testcontainers:testcontainers-clickhouse")
	optional("org.testcontainers:testcontainers-jdbc")
	optional("org.testcontainers:testcontainers-mariadb")
	optional("org.testcontainers:testcontainers-mssqlserver")
	optional("org.testcontainers:testcontainers-mysql")
	optional("org.testcontainers:testcontainers-oracle-xe")
	optional("org.testcontainers:testcontainers-oracle-free")
	optional("org.testcontainers:testcontainers-postgresql")
	optional("org.testcontainers:testcontainers-r2dbc")

	dockerTestImplementation(project(":core:spring-boot-test"))
	dockerTestImplementation(project(":module:spring-boot-jdbc"))
	dockerTestImplementation(project(":test-support:spring-boot-docker-test-support"))
	dockerTestImplementation(testFixtures(project(":core:spring-boot-docker-compose")))
	dockerTestImplementation("org.testcontainers:testcontainers-junit-jupiter")

	dockerTestRuntimeOnly("com.clickhouse:clickhouse-r2dbc")
	dockerTestRuntimeOnly("com.oracle.database.r2dbc:oracle-r2dbc")
	dockerTestRuntimeOnly("io.r2dbc:r2dbc-mssql")
	dockerTestRuntimeOnly("org.postgresql:r2dbc-postgresql")

	testCompileOnly("com.fasterxml.jackson.core:jackson-annotations")

	testImplementation(project(":core:spring-boot-test"))
	testImplementation(project(":module:spring-boot-jdbc"))
	testImplementation(project(":test-support:spring-boot-test-support"))
	testImplementation(testFixtures(project(":core:spring-boot-testcontainers")))
	testImplementation(testFixtures(project(":module:spring-boot-sql")))
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.r2dbc:r2dbc-h2")
	testImplementation("org.postgresql:r2dbc-postgresql")

	testCompileOnly("com.google.code.findbugs:jsr305")

	testRuntimeOnly("ch.qos.logback:logback-classic")
}

tasks.named("compileTestJava") {
	options.nullability.checking = "tests"
}

tasks.named("compileDockerTestJava") {
	options.nullability.checking = "tests"
}
