plugins {
	id "java-library"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.docker-test"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Test AutoConfigure"

dependencies {
	api(project(":spring-boot-project:spring-boot"))
	api(project(":spring-boot-project:spring-boot-test"))
	api(project(":spring-boot-project:spring-boot-autoconfigure"))

	dockerTestImplementation(project(":spring-boot-project:spring-boot-docker-compose"))
	dockerTestImplementation(project(":spring-boot-project:spring-boot-testcontainers"))
	dockerTestImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support-docker"))
	dockerTestImplementation("com.zaxxer:HikariCP")
	dockerTestImplementation("io.projectreactor:reactor-test")
	dockerTestImplementation("com.redis:testcontainers-redis")
	dockerTestImplementation("com.h2database:h2")
	dockerTestImplementation("org.assertj:assertj-core")
	dockerTestImplementation("org.junit.jupiter:junit-jupiter")
	dockerTestImplementation("org.postgresql:postgresql")
	dockerTestImplementation("org.testcontainers:cassandra")
	dockerTestImplementation("org.testcontainers:couchbase")
	dockerTestImplementation("org.testcontainers:elasticsearch")
	dockerTestImplementation("org.testcontainers:junit-jupiter")
	dockerTestImplementation("org.testcontainers:mongodb")
	dockerTestImplementation("org.testcontainers:neo4j")
	dockerTestImplementation("org.testcontainers:postgresql")
	dockerTestImplementation("org.testcontainers:testcontainers")

	dockerTestRuntimeOnly("io.lettuce:lettuce-core")
	dockerTestRuntimeOnly("org.springframework.data:spring-data-redis")

	optional("jakarta.json.bind:jakarta.json.bind-api")
	optional("jakarta.persistence:jakarta.persistence-api")
	optional("jakarta.servlet:jakarta.servlet-api")
	optional("jakarta.transaction:jakarta.transaction-api")
	optional("com.fasterxml.jackson.core:jackson-databind")
	optional("com.google.code.gson:gson")
	optional("com.jayway.jsonpath:json-path")
	optional("com.sun.xml.messaging.saaj:saaj-impl")
	optional("org.hibernate.orm:hibernate-core")
	optional("org.htmlunit:htmlunit") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	optional("org.junit.jupiter:junit-jupiter-api")
	optional("org.seleniumhq.selenium:htmlunit3-driver") {
		exclude(group: "commons-logging", module: "commons-logging")
		exclude(group: "com.sun.activation", module: "jakarta.activation")
	}
	optional("org.seleniumhq.selenium:selenium-api")
	optional("org.springframework:spring-orm")
	optional("org.springframework:spring-test")
	optional("org.springframework:spring-web")
	optional("org.springframework:spring-webmvc")
	optional("org.springframework:spring-webflux")
	optional("org.springframework.data:spring-data-cassandra") {
		exclude group: "org.slf4j", module: "jcl-over-slf4j"
	}
	optional("org.springframework.data:spring-data-couchbase")
	optional("org.springframework.data:spring-data-elasticsearch")
	optional("org.springframework.data:spring-data-jdbc")
	optional("org.springframework.data:spring-data-jpa")
	optional("org.springframework.data:spring-data-ldap")
	optional("org.springframework.data:spring-data-mongodb")
	optional("org.springframework.data:spring-data-neo4j")
	optional("org.springframework.data:spring-data-r2dbc")
	optional("org.springframework.data:spring-data-redis")
	optional("org.springframework.graphql:spring-graphql-test")
	optional("org.springframework.restdocs:spring-restdocs-mockmvc")
	optional("org.springframework.restdocs:spring-restdocs-restassured")
	optional("org.springframework.restdocs:spring-restdocs-webtestclient")
	optional("org.springframework.security:spring-security-config")
	optional("org.springframework.security:spring-security-test")
	optional("org.springframework.ws:spring-ws-core")
	optional("org.springframework.ws:spring-ws-test")
	optional("org.apache.tomcat.embed:tomcat-embed-core")
	optional("org.mongodb:mongodb-driver-reactivestreams")
	optional("org.mongodb:mongodb-driver-sync")
	optional("io.micrometer:micrometer-tracing")

	testImplementation(project(":spring-boot-project:spring-boot-actuator"))
	testImplementation(project(":spring-boot-project:spring-boot-actuator-autoconfigure"))
	testImplementation(project(":spring-boot-project:spring-boot-testcontainers"))
	testImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support"))
	testImplementation("ch.qos.logback:logback-classic")
	testImplementation("com.fasterxml.jackson.module:jackson-module-parameter-names")
	testImplementation("com.h2database:h2")
	testImplementation("com.unboundid:unboundid-ldapsdk")
	testImplementation("io.lettuce:lettuce-core")
	testImplementation("io.micrometer:micrometer-registry-prometheus")
	testImplementation("io.projectreactor.netty:reactor-netty-http")
	testImplementation("io.projectreactor:reactor-core")
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.r2dbc:r2dbc-h2")
	testImplementation("jakarta.json:jakarta.json-api")
	testImplementation("org.apache.commons:commons-pool2")
	testImplementation("org.apache.tomcat.embed:tomcat-embed-el")
	testImplementation("org.aspectj:aspectjrt")
	testImplementation("org.aspectj:aspectjweaver")
	testImplementation("org.assertj:assertj-core")
	testImplementation("org.awaitility:awaitility")
	testImplementation("org.eclipse:yasson")
	testImplementation("org.hibernate.validator:hibernate-validator")
	testImplementation("org.hsqldb:hsqldb")
	testImplementation("org.jooq:jooq")
	testImplementation("org.junit.jupiter:junit-jupiter")
	testImplementation("org.junit.platform:junit-platform-engine")
	testImplementation("org.junit.platform:junit-platform-launcher")
	testImplementation("org.mockito:mockito-core")
	testImplementation("org.mockito:mockito-junit-jupiter")
	testImplementation("org.opensaml:opensaml-core:4.0.1")
	testImplementation("org.opensaml:opensaml-saml-api:4.0.1")
	testImplementation("org.opensaml:opensaml-saml-impl:4.0.1")
	testImplementation("org.skyscreamer:jsonassert")
	testImplementation("org.springframework:spring-core-test")
	testImplementation("org.springframework.hateoas:spring-hateoas")
	testImplementation("org.springframework.plugin:spring-plugin-core")
	testImplementation("org.springframework.security:spring-security-oauth2-client")
	testImplementation("org.springframework.security:spring-security-saml2-service-provider") {
		exclude group: "org.opensaml", module: "opensaml-core"
		exclude group: "org.opensaml", module: "opensaml-saml-api"
		exclude group: "org.opensaml", module: "opensaml-saml-impl"
	}
	testImplementation("org.thymeleaf:thymeleaf")
}

configurations {
	configurationPropertiesMetadata
}

artifacts {
	configurationPropertiesMetadata new File(sourceSets.main.output.resourcesDir, "META-INF/spring-configuration-metadata.json"), { artifact ->
		artifact.builtBy sourceSets.main.processResourcesTaskName
	}
}

test {
	include "**/*Tests.class"
}

tasks.register("testSliceMetadata", org.springframework.boot.build.test.autoconfigure.TestSliceMetadata) {
	sourceSet = sourceSets.main
	outputFile = layout.buildDirectory.file("test-slice-metadata.properties")
}

javadoc {
	dependsOn processResources
}

testSliceMetadata {
	dependsOn processResources
}

test {
	dependsOn processResources
}

compileTestJava {
	dependsOn processResources
}

compileDockerTestJava {
	dependsOn processResources
}

jar {
	dependsOn processResources
}