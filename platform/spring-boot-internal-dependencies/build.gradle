/*
 * Copyright 2012-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id "org.springframework.boot.bom"
}

description = "Spring Boot Internal Dependencies"

bom {
	upgrade {
		policy = "same-major-version"
		gitHub {
			issueLabels = ["type: task"]
		}
	}
	library("API Guardian", "1.1.2") {
		group("org.apiguardian") {
			modules = [
				"apiguardian-api"
			]
		}
	}
	library("AWS Advanced JDBC Wrapper", "2.6.0") {
		group("software.amazon.jdbc") {
			modules = [
				"aws-advanced-jdbc-wrapper"
			]
		}
	}
	library("C3P0", "0.11.1") {
		group("com.mchange") {
			modules = [
				"c3p0"
			]
		}
	}
	library("ClickHouse", "0.9.0") {
		group("com.clickhouse") {
			modules = [
				"clickhouse-jdbc",
				"clickhouse-r2dbc"
			]
		}
	}
	library("Commons Compress", "1.27.1") {
		group("org.apache.commons") {
			modules = [
				"commons-compress"
			]
		}
	}
	library("Commons FileUpload", "1.6.0") {
		group("commons-fileupload") {
			modules = [
				"commons-fileupload"
			]
		}
	}
	library("CycloneDX Gradle Plugin", "2.3.0") {
		group("org.cyclonedx") {
			modules = [
				"cyclonedx-gradle-plugin"
			]
		}
	}
	library("Findbugs JSR 305", "3.0.2") {
		group("com.google.code.findbugs") {
			modules = [
				"jsr305"
			]
		}
	}
	library("Janino", "3.1.12") {
		group("org.codehaus.janino") {
			bom("janino") {
				permit("junit:junit")
			}
		}
	}
	library("JLine", "2.11") {
		prohibit {
			versionRange "[2.12,)"
			because "it contains breaking changes"
		}
		group("jline") {
			modules = [
				"jline"
			]
		}
	}
	library("JNA", "5.17.0") {
		group("net.java.dev.jna") {
			modules = [
				"jna-platform"
			]
		}
	}
	library("JOpt Simple", "5.0.4") {
		group("net.sf.jopt-simple") {
			modules = [
				"jopt-simple"
			]
		}
	}
	library("Maven", "${mavenVersion}") {
		group("org.apache.maven") {
			modules = [
				"maven-core",
				"maven-model-builder",
				"maven-plugin-api",
				"maven-resolver-provider"
			]
		}
	}
	library("Maven Common Artifact Filters", "3.4.0") {
		group("org.apache.maven.shared") {
			modules = [
				"maven-common-artifact-filters"
			]
		}
	}
	library("Maven Invoker", "3.3.0") {
		group("org.apache.maven.shared") {
			modules = [
				"maven-invoker"
			]
		}
	}
	library("Maven Plugin Tools", "3.15.1") {
		group("org.apache.maven.plugin-tools") {
			modules = [
				"maven-plugin-annotations"
			]
		}
	}
	library("Maven Resolver", "1.9.23") {
		group("org.apache.maven.resolver") {
			modules = [
				"maven-resolver-api",
				"maven-resolver-connector-basic",
				"maven-resolver-impl",
				"maven-resolver-spi",
				"maven-resolver-transport-file",
				"maven-resolver-transport-http",
				"maven-resolver-util"
			]
		}
	}
	library("Maven Shade Plugin", "3.6.0") {
		group("org.apache.maven.plugins") {
			modules = [
				"maven-shade-plugin"
			]
		}
	}
	library("MockK", "1.14.2") {
		group("io.mockk") {
			modules = [
				"mockk"
			]
		}
	}
	library("Native Gradle Plugin", "${nativeBuildToolsVersion}") {
		group("org.graalvm.buildtools") {
			modules = [
				"native-gradle-plugin"
			]
		}
	}
	library("OkHttp", "5.1.0") {
		group("com.squareup.okhttp3") {
			modules = [
				"mockwebserver"
			]
		}
	}
	library("OpenTelemetry Logback Appender", "2.16.0-alpha") {
		group("io.opentelemetry.instrumentation") {
			modules = [
				"opentelemetry-logback-appender-1.0"
			]
		}
	}
	library("Plexus Build API", "0.0.7") {
		group("org.sonatype.plexus") {
			modules = [
				"plexus-build-api"
			]
		}
	}
	library("Plexus Sec Dispatcher", "1.4") {
		group("org.sonatype.plexus") {
			modules = [
				"plexus-sec-dispatcher"
			]
		}
	}
	library("Simple JNDI", "0.25.0") {
		group("com.github.h-thurow") {
			modules = [
				"simple-jndi"
			]
		}
	}
	library("Sisu", "2.6.0") {
		group("org.sonatype.sisu") {
			modules = [
				"sisu-inject-plexus"
			]
		}
	}
	library("Spock Framework", "2.3-groovy-4.0") {
		group("org.spockframework") {
			modules = [
				"spock-core"
			]
		}
	}
	library("TestNG", "6.14.3") {
		group("org.testng") {
			modules = [
				"testng"
			]
		}
	}
}

dependencies {
	api(enforcedPlatform(project(":platform:spring-boot-dependencies")))
}

tasks.withType(GenerateModuleMetadata).configureEach {
	// Internal module so enforced platform dependencies are OK
	suppressedValidationErrors.add('enforced-platform')
}
